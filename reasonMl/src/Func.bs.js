// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");

List.map((function (x) {
        return x + 1 | 0;
      }), /* :: */[
      23,
      /* :: */[
        74,
        /* :: */[
          21,
          /* :: */[
            32,
            /* [] */0
          ]
        ]
      ]
    ]);

function even(x) {
  if (x <= 0) {
    return true;
  } else {
    return odd(x - 1 | 0);
  }
}

function odd(x) {
  if (x <= 0) {
    return false;
  } else {
    return even(x - 1 | 0);
  }
}

function factorial(x) {
  if (x <= 2) {
    return x;
  } else {
    return Caml_int32.imul(x, factorial(x - 1 | 0));
  }
}

function callFunc(f) {
  return Curry._1(f, 1) + Curry._1(f, 3) | 0;
}

callFunc((function (x) {
        return x;
      }));

callFunc((function (x) {
        return (x << 1);
      }));

function addComps(param) {
  return param[0] + param[1] | 0;
}

var tuple = /* tuple */[
  4,
  5
];

addComps(tuple);

function adding2(x, y) {
  return x + y | 0;
}

function add(x, y, param) {
  if (x !== undefined) {
    var x$prime = x;
    if (y !== undefined) {
      return x$prime + y | 0;
    } else {
      return x$prime;
    }
  } else if (y !== undefined) {
    return y;
  } else {
    return 0;
  }
}

exports.even = even;
exports.odd = odd;
exports.factorial = factorial;
exports.callFunc = callFunc;
exports.addComps = addComps;
exports.tuple = tuple;
exports.adding2 = adding2;
exports.add = add;
/*  Not a pure module */
